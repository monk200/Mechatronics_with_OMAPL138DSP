Public Class Form1
    Dim DirSelected As Integer

    Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
        FolderBrowserDialog1.ShowDialog()
        Label3.Text = FolderBrowserDialog1.SelectedPath & "\" & TextBox1.Text
        Button2.Enabled = True
        DirSelected = 1
    End Sub

    Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
        DirSelected = 0
    End Sub

    Private Sub TextBox1_TextChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles TextBox1.TextChanged
        If DirSelected = 1 Then
            Label3.Text = FolderBrowserDialog1.SelectedPath & "\" & TextBox1.Text
        End If
    End Sub

    Private Sub Button2_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button2.Click
        Dim retvalue As Object

        Dim ProjectDirectory As String
        Dim ProjectName As String
        Dim Project_project_fileFullPath As Object
        Dim Project_cproject_fileFullPath As Object
        Dim Project_ccsproject_fileFullPath As Object
        Dim Project_cmd_fileFullPath As Object
        Dim Project_ccxml_fileFullPath As Object
        Dim ProjectSubDirectory As String
        Dim ProjectSub_settings_Dir As String
        Dim ProjectSub_Debug_Dir As String
        Dim ProjectCfileFullPath As Object
        Dim ProjectUART_HfileFullPath As Object
        Dim ProjectUARTfuncsfileFullPath As Object
        Dim ProjectCfile As Object
        Dim i As Integer

        Dim Drive As String
        Dim PathStr As String, NameStr As String

        On Error GoTo SaveError

        ProjectName = TextBox1.Text
        Drive = Mid(FolderBrowserDialog1.SelectedPath, 1, 2)
        PathStr = Mid(FolderBrowserDialog1.SelectedPath, 4)
        NameStr = ProjectName

        ' Check for bad characters in path
        For i = 0 To PathStr.Length - 1
            If Not ((Asc(PathStr(i)) > 47 And Asc(PathStr(i)) < 58) _
                    Or (Asc(PathStr(i)) > 64 And Asc(PathStr(i)) < 91) _
                    Or (Asc(PathStr(i)) > 96 And Asc(PathStr(i)) < 123) _
                    Or Asc(PathStr(i)) = 92 Or Asc(PathStr(i)) = 95) Then
                MsgBox("Path contains a non-alphanumeric character or a space." & _
                    Chr(13) & Chr(10) & "Please choose a different path.")

                Exit Sub
            End If
        Next i

        ' Check for bad characters in project name
        For i = 0 To NameStr.Length - 1
            If Not ((Asc(NameStr(i)) > 47 And Asc(NameStr(i)) < 58) _
                    Or (Asc(NameStr(i)) > 64 And Asc(NameStr(i)) < 91) _
                    Or (Asc(NameStr(i)) > 96 And Asc(NameStr(i)) < 123) _
                    Or Asc(NameStr(i)) = 92 Or Asc(NameStr(i)) = 95) Then
                MsgBox("Project name contains a non-alphanumeric character or a space." & _
                    Chr(13) & Chr(10) & "Please choose a different name.")

                Exit Sub
            End If
        Next i


        ProjectDirectory = FolderBrowserDialog1.SelectedPath & "\" & ProjectName & "\"
        ProjectSubDirectory = ProjectDirectory & ProjectName & "Project\"
        ProjectSub_settings_Dir = ProjectSubDirectory & ".settings\"
        ProjectSub_Debug_Dir = ProjectSubDirectory & "Debug\"
        ProjectCfileFullPath = ProjectDirectory & "user_" & ProjectName & ".c"
        ProjectCfile = "user_" & ProjectName & ".c"
        ProjectUART_HfileFullPath = ProjectDirectory & "UART.h"
        ProjectUARTfuncsfileFullPath = ProjectDirectory & "UARTfuncs.c"


        Project_project_fileFullPath = ProjectSubDirectory & ".project"
        Project_cproject_fileFullPath = ProjectSubDirectory & ".cproject"
        Project_ccsproject_fileFullPath = ProjectSubDirectory & ".ccsproject"
        Project_cmd_fileFullPath = ProjectSubDirectory & "lnk_msp430g2553.cmd"
        Project_ccxml_fileFullPath = ProjectSubDirectory & "MSP430G2553.ccxml"


        MkDir(ProjectDirectory)
        MkDir(ProjectSubDirectory)
        MkDir(ProjectSub_settings_Dir)
        MkDir(ProjectSub_Debug_Dir)



        GoTo NoError
SaveError:
        'MsgBox "Error" & CStr(Err.Number)
        If Err.Number = 75 Then
            MsgBox("Directory already Exists!")
            GoTo NoWrite
        End If
NoError:

        FileOpen(1, Project_project_fileFullPath, OpenMode.Output)

        PrintLine(1, "<?xml version=""1.0"" encoding=""UTF-8""?>")
        PrintLine(1, "<projectDescription>")
        PrintLine(1, "	<name>" & ProjectName & "</name>")
        PrintLine(1, "	<comment></comment>")
        PrintLine(1, "	<projects>")
        PrintLine(1, "	</projects>")
        PrintLine(1, "	<buildSpec>")
        PrintLine(1, "		<buildCommand>")
        PrintLine(1, "			<name>org.eclipse.cdt.managedbuilder.core.genmakebuilder</name>")
        PrintLine(1, "			<arguments>")
        PrintLine(1, "				<dictionary>")
        PrintLine(1, "					<key>?name?</key>")
        PrintLine(1, "					<value></value>")
        PrintLine(1, "				</dictionary>")
        PrintLine(1, "				<dictionary>")
        PrintLine(1, "					<key>org.eclipse.cdt.make.core.append_environment</key>")
        PrintLine(1, "					<value>true</value>")
        PrintLine(1, "				</dictionary>")
        PrintLine(1, "				<dictionary>")
        PrintLine(1, "					<key>org.eclipse.cdt.make.core.autoBuildTarget</key>")
        PrintLine(1, "					<value>all</value>")
        PrintLine(1, "				</dictionary>")
        PrintLine(1, "				<dictionary>")
        PrintLine(1, "					<key>org.eclipse.cdt.make.core.buildArguments</key>")
        PrintLine(1, "					<value>-k</value>")
        PrintLine(1, "				</dictionary>")
        PrintLine(1, "				<dictionary>")
        PrintLine(1, "					<key>org.eclipse.cdt.make.core.buildCommand</key>")
        PrintLine(1, "					<value>${CCS_UTILS_DIR}/bin/gmake</value>")
        PrintLine(1, "				</dictionary>")
        PrintLine(1, "				<dictionary>")
        PrintLine(1, "					<key>org.eclipse.cdt.make.core.buildLocation</key>")
        PrintLine(1, "					<value>${workspace_loc:/" & ProjectName & "/Debug}</value>")
        PrintLine(1, "				</dictionary>")
        PrintLine(1, "				<dictionary>")
        PrintLine(1, "					<key>org.eclipse.cdt.make.core.cleanBuildTarget</key>")
        PrintLine(1, "					<value>clean</value>")
        PrintLine(1, "				</dictionary>")
        PrintLine(1, "				<dictionary>")
        PrintLine(1, "					<key>org.eclipse.cdt.make.core.contents</key>")
        PrintLine(1, "					<value>org.eclipse.cdt.make.core.activeConfigSettings</value>")
        PrintLine(1, "				</dictionary>")
        PrintLine(1, "				<dictionary>")
        PrintLine(1, "					<key>org.eclipse.cdt.make.core.enableAutoBuild</key>")
        PrintLine(1, "					<value>true</value>")
        PrintLine(1, "				</dictionary>")
        PrintLine(1, "				<dictionary>")
        PrintLine(1, "					<key>org.eclipse.cdt.make.core.enableCleanBuild</key>")
        PrintLine(1, "					<value>true</value>")
        PrintLine(1, "				</dictionary>")
        PrintLine(1, "				<dictionary>")
        PrintLine(1, "					<key>org.eclipse.cdt.make.core.enableFullBuild</key>")
        PrintLine(1, "					<value>true</value>")
        PrintLine(1, "				</dictionary>")
        PrintLine(1, "				<dictionary>")
        PrintLine(1, "					<key>org.eclipse.cdt.make.core.fullBuildTarget</key>")
        PrintLine(1, "					<value>all</value>")
        PrintLine(1, "				</dictionary>")
        PrintLine(1, "				<dictionary>")
        PrintLine(1, "					<key>org.eclipse.cdt.make.core.stopOnError</key>")
        PrintLine(1, "					<value>true</value>")
        PrintLine(1, "				</dictionary>")
        PrintLine(1, "				<dictionary>")
        PrintLine(1, "					<key>org.eclipse.cdt.make.core.useDefaultBuildCmd</key>")
        PrintLine(1, "					<value>true</value>")
        PrintLine(1, "				</dictionary>")
        PrintLine(1, "			</arguments>")
        PrintLine(1, "		</buildCommand>")
        PrintLine(1, "		<buildCommand>")
        PrintLine(1, "			<name>org.eclipse.cdt.managedbuilder.core.ScannerConfigBuilder</name>")
        PrintLine(1, "			<triggers>full,incremental,</triggers>")
        PrintLine(1, "			<arguments>")
        PrintLine(1, "			</arguments>")
        PrintLine(1, "		</buildCommand>")
        PrintLine(1, "	</buildSpec>")
        PrintLine(1, "	<natures>")
        PrintLine(1, "		<nature>com.ti.ccstudio.core.ccsNature</nature>")
        PrintLine(1, "		<nature>org.eclipse.cdt.core.cnature</nature>")
        PrintLine(1, "		<nature>org.eclipse.cdt.managedbuilder.core.managedBuildNature</nature>")
        PrintLine(1, "		<nature>org.eclipse.cdt.core.ccnature</nature>")
        PrintLine(1, "		<nature>org.eclipse.cdt.managedbuilder.core.ScannerConfigNature</nature>")
        PrintLine(1, "	</natures>")
        PrintLine(1, "	<linkedResources>")
        PrintLine(1, "	<link>")
        PrintLine(1, "		<name>UARTFuncs.c</name>")
        PrintLine(1, "		<type>1</type>")
        PrintLine(1, "		<locationURI>PARENT-1-PROJECT_LOC/UARTFuncs.c</locationURI>")
        PrintLine(1, "	</link>")
        PrintLine(1, "	<link>")
        PrintLine(1, "		<name>" & ProjectCfile & "</name>")
        PrintLine(1, "		<type>1</type>")
        PrintLine(1, "		<locationURI>PARENT-1-PROJECT_LOC/" & ProjectCfile & "</locationURI>")
        PrintLine(1, "	</link>")
        PrintLine(1, "</linkedResources>")
        PrintLine(1, "</projectDescription>")
        FileClose(1)


        FileOpen(1, Project_cproject_fileFullPath, OpenMode.Output)
        PrintLine(1, "<?xml version=""1.0"" encoding=""UTF-8"" standalone=""no""?>")
        PrintLine(1, "<?fileVersion 4.0.0?>")
        PrintLine(1, "")
        PrintLine(1, "<cproject storage_type_id=""org.eclipse.cdt.core.XmlProjectDescriptionStorage"">")
        PrintLine(1, "	<storageModule configRelations=""2"" moduleId=""org.eclipse.cdt.core.settings"">")
        PrintLine(1, "		<cconfiguration id=""com.ti.ccstudio.buildDefinitions.MSP430.Debug.239252645"">")
        PrintLine(1, "			<storageModule buildSystemId=""org.eclipse.cdt.managedbuilder.core.configurationDataProvider"" id=""com.ti.ccstudio.buildDefinitions.MSP430.Debug.239252645"" moduleId=""org.eclipse.cdt.core.settings"" name=""Debug"">")
        PrintLine(1, "				<externalSettings/>")
        PrintLine(1, "				<extensions>")
        PrintLine(1, "					<extension id=""com.ti.ccstudio.binaryparser.CoffParser"" point=""org.eclipse.cdt.core.BinaryParser""/>")
        PrintLine(1, "					<extension id=""com.ti.ccstudio.errorparser.CoffErrorParser"" point=""org.eclipse.cdt.core.ErrorParser""/>")
        PrintLine(1, "					<extension id=""com.ti.ccstudio.errorparser.LinkErrorParser"" point=""org.eclipse.cdt.core.ErrorParser""/>")
        PrintLine(1, "					<extension id=""com.ti.ccstudio.errorparser.AsmErrorParser"" point=""org.eclipse.cdt.core.ErrorParser""/>")
        PrintLine(1, "				</extensions>")
        PrintLine(1, "			</storageModule>")
        PrintLine(1, "			<storageModule moduleId=""cdtBuildSystem"" version=""17.9.0.STS"">")
        PrintLine(1, "				<configuration artifactExtension=""out"" artifactName=""${ProjName}"" buildProperties="""" cleanCommand=""${CG_CLEAN_CMD}"" description="""" id=""com.ti.ccstudio.buildDefinitions.MSP430.Debug.239252645"" name=""Debug"" parent=""com.ti.ccstudio.buildDefinitions.MSP430.Debug"">")
        PrintLine(1, "					<folderInfo id=""com.ti.ccstudio.buildDefinitions.MSP430.Debug.239252645."" name=""/"" resourcePath="""">")
        PrintLine(1, "						<toolChain id=""com.ti.ccstudio.buildDefinitions.MSP430_17.9.exe.DebugToolchain.806080512"" name=""TI Build Tools"" superClass=""com.ti.ccstudio.buildDefinitions.MSP430_17.9.exe.DebugToolchain"" targetTool=""com.ti.ccstudio.buildDefinitions.MSP430_17.9.exe.linkerDebug.1376989392"">")
        PrintLine(1, "							<option id=""com.ti.ccstudio.buildDefinitions.core.OPT_TAGS.1897139816"" superClass=""com.ti.ccstudio.buildDefinitions.core.OPT_TAGS"" valueType=""stringList"">")
        PrintLine(1, "								<listOptionValue builtIn=""false"" value=""DEVICE_CONFIGURATION_ID=MSP430G2553""/>")
        PrintLine(1, "								<listOptionValue builtIn=""false"" value=""DEVICE_ENDIANNESS=little""/>")
        PrintLine(1, "								<listOptionValue builtIn=""false"" value=""OUTPUT_FORMAT=ELF""/>")
        PrintLine(1, "								<listOptionValue builtIn=""false"" value=""CCS_MBS_VERSION=5.1.0.01""/>")
        PrintLine(1, "								<listOptionValue builtIn=""false"" value=""LINKER_COMMAND_FILE=lnk_msp430g2553.cmd""/>")
        PrintLine(1, "								<listOptionValue builtIn=""false"" value=""RUNTIME_SUPPORT_LIBRARY=libc.a""/>")
        PrintLine(1, "								<listOptionValue builtIn=""false"" value=""LINK_ORDER=""/>")
        PrintLine(1, "								<listOptionValue builtIn=""false"" value=""OUTPUT_TYPE=executable""/>")
        PrintLine(1, "							</option>")
        PrintLine(1, "							<option id=""com.ti.ccstudio.buildDefinitions.core.OPT_CODEGEN_VERSION.1439157017"" name=""Compiler version"" superClass=""com.ti.ccstudio.buildDefinitions.core.OPT_CODEGEN_VERSION"" value=""17.9.0.STS"" valueType=""string""/>")
        PrintLine(1, "							<targetPlatform id=""com.ti.ccstudio.buildDefinitions.MSP430_17.9.exe.targetPlatformDebug.808284151"" name=""Platform"" superClass=""com.ti.ccstudio.buildDefinitions.MSP430_17.9.exe.targetPlatformDebug""/>")
        PrintLine(1, "							<builder buildPath=""${BuildDirectory}"" id=""com.ti.ccstudio.buildDefinitions.MSP430_17.9.exe.builderDebug.164603049"" keepEnvironmentInBuildfile=""false"" name=""GNU Make"" superClass=""com.ti.ccstudio.buildDefinitions.MSP430_17.9.exe.builderDebug""/>")
        PrintLine(1, "							<tool id=""com.ti.ccstudio.buildDefinitions.MSP430_17.9.exe.compilerDebug.185031765"" name=""MSP430 Compiler"" superClass=""com.ti.ccstudio.buildDefinitions.MSP430_17.9.exe.compilerDebug"">")
        PrintLine(1, "								<option id=""com.ti.ccstudio.buildDefinitions.MSP430_17.9.compilerID.SILICON_VERSION.1249465317"" name=""Silicon version (--silicon_version, -v)"" superClass=""com.ti.ccstudio.buildDefinitions.MSP430_17.9.compilerID.SILICON_VERSION"" value=""com.ti.ccstudio.buildDefinitions.MSP430_17.9.compilerID.SILICON_VERSION.msp"" valueType=""enumerated""/>")
        PrintLine(1, "								<option id=""com.ti.ccstudio.buildDefinitions.MSP430_17.9.compilerID.DEFINE.1588554142"" name=""Pre-define NAME (--define, -D)"" superClass=""com.ti.ccstudio.buildDefinitions.MSP430_17.9.compilerID.DEFINE"" valueType=""definedSymbols"">")
        PrintLine(1, "									<listOptionValue builtIn=""false"" value=""__MSP430G2553__""/>")
        PrintLine(1, "								</option>")
        PrintLine(1, "								<option id=""com.ti.ccstudio.buildDefinitions.MSP430_17.9.compilerID.PRINTF_SUPPORT.116413620"" name=""Level of printf support required (--printf_support)"" superClass=""com.ti.ccstudio.buildDefinitions.MSP430_17.9.compilerID.PRINTF_SUPPORT"" value=""com.ti.ccstudio.buildDefinitions.MSP430_17.9.compilerID.PRINTF_SUPPORT.nofloat"" valueType=""enumerated""/>")
        PrintLine(1, "								<option id=""com.ti.ccstudio.buildDefinitions.MSP430_17.9.compilerID.ABI.1653288551"" name=""Application binary interface (--abi)"" superClass=""com.ti.ccstudio.buildDefinitions.MSP430_17.9.compilerID.ABI"" value=""com.ti.ccstudio.buildDefinitions.MSP430_17.9.compilerID.ABI.eabi"" valueType=""enumerated""/>")
        PrintLine(1, "								<option id=""com.ti.ccstudio.buildDefinitions.MSP430_17.9.compilerID.OPT_LEVEL.123327919"" name=""Optimization level (--opt_level, -O)"" superClass=""com.ti.ccstudio.buildDefinitions.MSP430_17.9.compilerID.OPT_LEVEL"" value=""com.ti.ccstudio.buildDefinitions.MSP430_17.9.compilerID.OPT_LEVEL.0"" valueType=""enumerated""/>")
        PrintLine(1, "								<option id=""com.ti.ccstudio.buildDefinitions.MSP430_17.9.compilerID.DEBUGGING_MODEL.1555802685"" name=""Debugging model"" superClass=""com.ti.ccstudio.buildDefinitions.MSP430_17.9.compilerID.DEBUGGING_MODEL"" value=""com.ti.ccstudio.buildDefinitions.MSP430_17.9.compilerID.DEBUGGING_MODEL.SYMDEBUG__DWARF"" valueType=""enumerated""/>")
        PrintLine(1, "								<option id=""com.ti.ccstudio.buildDefinitions.MSP430_17.9.compilerID.INCLUDE_PATH.1191917246"" name=""Add dir to #include search path (--include_path, -I)"" superClass=""com.ti.ccstudio.buildDefinitions.MSP430_17.9.compilerID.INCLUDE_PATH"" valueType=""includePath"">")
        PrintLine(1, "									<listOptionValue builtIn=""false"" value=""&quot;${CCS_BASE_ROOT}/msp430/include&quot;""/>")
        PrintLine(1, "									<listOptionValue builtIn=""false"" value=""&quot;${CG_TOOL_ROOT}/include&quot;""/>")
        PrintLine(1, "								</option>")
        PrintLine(1, "								<option id=""com.ti.ccstudio.buildDefinitions.MSP430_17.9.compilerID.DIAG_WARNING.1831012364"" name=""Treat diagnostic &lt;id&gt; as warning (--diag_warning, -pdsw)"" superClass=""com.ti.ccstudio.buildDefinitions.MSP430_17.9.compilerID.DIAG_WARNING"" valueType=""stringList"">")
        PrintLine(1, "									<listOptionValue builtIn=""false"" value=""225""/>")
        PrintLine(1, "								</option>")
        PrintLine(1, "								<option id=""com.ti.ccstudio.buildDefinitions.MSP430_17.9.compilerID.DISPLAY_ERROR_NUMBER.974274464"" name=""Emit diagnostic identifier numbers (--display_error_number, -pden)"" superClass=""com.ti.ccstudio.buildDefinitions.MSP430_17.9.compilerID.DISPLAY_ERROR_NUMBER"" value=""true"" valueType=""boolean""/>")
        PrintLine(1, "								<inputType id=""com.ti.ccstudio.buildDefinitions.MSP430_17.9.compiler.inputType__C_SRCS.811332482"" name=""C Sources"" superClass=""com.ti.ccstudio.buildDefinitions.MSP430_17.9.compiler.inputType__C_SRCS""/>")
        PrintLine(1, "								<inputType id=""com.ti.ccstudio.buildDefinitions.MSP430_17.9.compiler.inputType__CPP_SRCS.589665557"" name=""C++ Sources"" superClass=""com.ti.ccstudio.buildDefinitions.MSP430_17.9.compiler.inputType__CPP_SRCS""/>")
        PrintLine(1, "								<inputType id=""com.ti.ccstudio.buildDefinitions.MSP430_17.9.compiler.inputType__ASM_SRCS.4419476"" name=""Assembly Sources"" superClass=""com.ti.ccstudio.buildDefinitions.MSP430_17.9.compiler.inputType__ASM_SRCS""/>")
        PrintLine(1, "								<inputType id=""com.ti.ccstudio.buildDefinitions.MSP430_17.9.compiler.inputType__ASM2_SRCS.2070324263"" name=""Assembly Sources"" superClass=""com.ti.ccstudio.buildDefinitions.MSP430_17.9.compiler.inputType__ASM2_SRCS""/>")
        PrintLine(1, "							</tool>")
        PrintLine(1, "							<tool id=""com.ti.ccstudio.buildDefinitions.MSP430_17.9.exe.linkerDebug.1376989392"" name=""MSP430 Linker"" superClass=""com.ti.ccstudio.buildDefinitions.MSP430_17.9.exe.linkerDebug"">")
        PrintLine(1, "								<option id=""com.ti.ccstudio.buildDefinitions.MSP430_17.9.linkerID.HEAP_SIZE.1280654663"" name=""Heap size for C/C++ dynamic memory allocation (--heap_size, -heap)"" superClass=""com.ti.ccstudio.buildDefinitions.MSP430_17.9.linkerID.HEAP_SIZE"" value=""80"" valueType=""string""/>")
        PrintLine(1, "								<option id=""com.ti.ccstudio.buildDefinitions.MSP430_17.9.linkerID.STACK_SIZE.1797355034"" name=""Set C system stack size (--stack_size, -stack)"" superClass=""com.ti.ccstudio.buildDefinitions.MSP430_17.9.linkerID.STACK_SIZE"" value=""80"" valueType=""string""/>")
        PrintLine(1, "								<option id=""com.ti.ccstudio.buildDefinitions.MSP430_17.9.linkerID.OUTPUT_FILE.1654017796"" name=""Specify output file name (--output_file, -o)"" superClass=""com.ti.ccstudio.buildDefinitions.MSP430_17.9.linkerID.OUTPUT_FILE"" value=""&quot;${ProjName}.out&quot;"" valueType=""string""/>")
        PrintLine(1, "								<option id=""com.ti.ccstudio.buildDefinitions.MSP430_17.9.linkerID.MAP_FILE.104966598"" name=""Input and output sections listed into &lt;file&gt; (--map_file, -m)"" superClass=""com.ti.ccstudio.buildDefinitions.MSP430_17.9.linkerID.MAP_FILE"" value=""&quot;${ProjName}.map&quot;"" valueType=""string""/>")
        PrintLine(1, "								<option id=""com.ti.ccstudio.buildDefinitions.MSP430_17.9.linkerID.SEARCH_PATH.1852975310"" name=""Add &lt;dir&gt; to library search path (--search_path, -i)"" superClass=""com.ti.ccstudio.buildDefinitions.MSP430_17.9.linkerID.SEARCH_PATH"" valueType=""stringList"">")
        PrintLine(1, "									<listOptionValue builtIn=""false"" value=""&quot;${CCS_BASE_ROOT}/msp430/include&quot;""/>")
        PrintLine(1, "									<listOptionValue builtIn=""false"" value=""&quot;${CG_TOOL_ROOT}/lib&quot;""/>")
        PrintLine(1, "									<listOptionValue builtIn=""false"" value=""&quot;${CG_TOOL_ROOT}/include&quot;""/>")
        PrintLine(1, "								</option>")
        PrintLine(1, "								<option id=""com.ti.ccstudio.buildDefinitions.MSP430_17.9.linkerID.LIBRARY.48912089"" name=""Include library file or command file as input (--library, -l)"" superClass=""com.ti.ccstudio.buildDefinitions.MSP430_17.9.linkerID.LIBRARY"" valueType=""libs"">")
        PrintLine(1, "									<listOptionValue builtIn=""false"" value=""&quot;libc.a&quot;""/>")
        PrintLine(1, "								</option>")
        PrintLine(1, "								<inputType id=""com.ti.ccstudio.buildDefinitions.MSP430_17.9.exeLinker.inputType__CMD_SRCS.79021924"" name=""Linker Command Files"" superClass=""com.ti.ccstudio.buildDefinitions.MSP430_17.9.exeLinker.inputType__CMD_SRCS""/>")
        PrintLine(1, "								<inputType id=""com.ti.ccstudio.buildDefinitions.MSP430_17.9.exeLinker.inputType__CMD2_SRCS.32513130"" name=""Linker Command Files"" superClass=""com.ti.ccstudio.buildDefinitions.MSP430_17.9.exeLinker.inputType__CMD2_SRCS""/>")
        PrintLine(1, "								<inputType id=""com.ti.ccstudio.buildDefinitions.MSP430_17.9.exeLinker.inputType__GEN_CMDS.1943676265"" name=""Generated Linker Command Files"" superClass=""com.ti.ccstudio.buildDefinitions.MSP430_17.9.exeLinker.inputType__GEN_CMDS""/>")
        PrintLine(1, "							</tool>")
        PrintLine(1, "						</toolChain>")
        PrintLine(1, "					</folderInfo>")
        PrintLine(1, "				</configuration>")
        PrintLine(1, "			</storageModule>")
        PrintLine(1, "			<storageModule moduleId=""org.eclipse.cdt.core.externalSettings""/>")
        PrintLine(1, "		</cconfiguration>")
        PrintLine(1, "		<cconfiguration id=""com.ti.ccstudio.buildDefinitions.MSP430.Release.771169621"">")
        PrintLine(1, "			<storageModule buildSystemId=""org.eclipse.cdt.managedbuilder.core.configurationDataProvider"" id=""com.ti.ccstudio.buildDefinitions.MSP430.Release.771169621"" moduleId=""org.eclipse.cdt.core.settings"" name=""Release"">")
        PrintLine(1, "				<externalSettings/>")
        PrintLine(1, "				<extensions>")
        PrintLine(1, "					<extension id=""com.ti.ccstudio.binaryparser.CoffParser"" point=""org.eclipse.cdt.core.BinaryParser""/>")
        PrintLine(1, "					<extension id=""com.ti.ccstudio.errorparser.CoffErrorParser"" point=""org.eclipse.cdt.core.ErrorParser""/>")
        PrintLine(1, "					<extension id=""com.ti.ccstudio.errorparser.LinkErrorParser"" point=""org.eclipse.cdt.core.ErrorParser""/>")
        PrintLine(1, "					<extension id=""com.ti.ccstudio.errorparser.AsmErrorParser"" point=""org.eclipse.cdt.core.ErrorParser""/>")
        PrintLine(1, "				</extensions>")
        PrintLine(1, "			</storageModule>")
        PrintLine(1, "			<storageModule moduleId=""cdtBuildSystem"" version=""4.0.0"">")
        PrintLine(1, "				<configuration artifactExtension=""out"" artifactName=""${ProjName}"" buildProperties="""" cleanCommand=""${CG_CLEAN_CMD}"" description="""" id=""com.ti.ccstudio.buildDefinitions.MSP430.Release.771169621"" name=""Release"" parent=""com.ti.ccstudio.buildDefinitions.MSP430.Release"">")
        PrintLine(1, "					<folderInfo id=""com.ti.ccstudio.buildDefinitions.MSP430.Release.771169621."" name=""/"" resourcePath="""">")
        PrintLine(1, "						<toolChain id=""com.ti.ccstudio.buildDefinitions.MSP430_4.0.exe.ReleaseToolchain.813596790"" name=""TI Build Tools"" superClass=""com.ti.ccstudio.buildDefinitions.MSP430_4.0.exe.ReleaseToolchain"" targetTool=""com.ti.ccstudio.buildDefinitions.MSP430_4.0.exe.linkerRelease.1910721801"">")
        PrintLine(1, "							<option id=""com.ti.ccstudio.buildDefinitions.core.OPT_TAGS.1113826847"" superClass=""com.ti.ccstudio.buildDefinitions.core.OPT_TAGS"" valueType=""stringList"">")
        PrintLine(1, "								<listOptionValue builtIn=""false"" value=""DEVICE_CONFIGURATION_ID=MSP430G2553""/>")
        PrintLine(1, "								<listOptionValue builtIn=""false"" value=""DEVICE_ENDIANNESS=little""/>")
        PrintLine(1, "								<listOptionValue builtIn=""false"" value=""OUTPUT_FORMAT=COFF""/>")
        PrintLine(1, "								<listOptionValue builtIn=""false"" value=""CCS_MBS_VERSION=5.1.0.01""/>")
        PrintLine(1, "								<listOptionValue builtIn=""false"" value=""LINKER_COMMAND_FILE=lnk_msp430g2553.cmd""/>")
        PrintLine(1, "								<listOptionValue builtIn=""false"" value=""RUNTIME_SUPPORT_LIBRARY=libc.a""/>")
        PrintLine(1, "								<listOptionValue builtIn=""false"" value=""OUTPUT_TYPE=executable""/>")
        PrintLine(1, "							</option>")
        PrintLine(1, "							<option id=""com.ti.ccstudio.buildDefinitions.core.OPT_CODEGEN_VERSION.704046954"" name=""Compiler version"" superClass=""com.ti.ccstudio.buildDefinitions.core.OPT_CODEGEN_VERSION"" value=""4.0.0"" valueType=""string""/>")
        PrintLine(1, "							<targetPlatform id=""com.ti.ccstudio.buildDefinitions.MSP430_4.0.exe.targetPlatformRelease.1811633027"" name=""Platform"" superClass=""com.ti.ccstudio.buildDefinitions.MSP430_4.0.exe.targetPlatformRelease""/>")
        PrintLine(1, "							<builder buildPath=""${BuildDirectory}"" id=""com.ti.ccstudio.buildDefinitions.MSP430_4.0.exe.builderRelease.1283808615"" keepEnvironmentInBuildfile=""false"" name=""GNU Make"" superClass=""com.ti.ccstudio.buildDefinitions.MSP430_4.0.exe.builderRelease""/>")
        PrintLine(1, "							<tool id=""com.ti.ccstudio.buildDefinitions.MSP430_4.0.exe.compilerRelease.892344759"" name=""MSP430 Compiler"" superClass=""com.ti.ccstudio.buildDefinitions.MSP430_4.0.exe.compilerRelease"">")
        PrintLine(1, "								<option id=""com.ti.ccstudio.buildDefinitions.MSP430_4.0.compilerID.SILICON_VERSION.1082120088"" name=""Silicon version (--silicon_version, -v)"" superClass=""com.ti.ccstudio.buildDefinitions.MSP430_4.0.compilerID.SILICON_VERSION"" value=""com.ti.ccstudio.buildDefinitions.MSP430_4.0.compilerID.SILICON_VERSION.msp"" valueType=""enumerated""/>")
        PrintLine(1, "								<option id=""com.ti.ccstudio.buildDefinitions.MSP430_4.0.compilerID.PRINTF_SUPPORT.911389106"" name=""Level of printf support required (--printf_support)"" superClass=""com.ti.ccstudio.buildDefinitions.MSP430_4.0.compilerID.PRINTF_SUPPORT"" value=""com.ti.ccstudio.buildDefinitions.MSP430_4.0.compilerID.PRINTF_SUPPORT.nofloat"" valueType=""enumerated""/>")
        PrintLine(1, "								<option id=""com.ti.ccstudio.buildDefinitions.MSP430_4.0.compilerID.DEFINE.596005561"" name=""Pre-define NAME (--define, -D)"" superClass=""com.ti.ccstudio.buildDefinitions.MSP430_4.0.compilerID.DEFINE"" valueType=""definedSymbols"">")
        PrintLine(1, "									<listOptionValue builtIn=""false"" value=""__MSP430G2553__""/>")
        PrintLine(1, "								</option>")
        PrintLine(1, "								<option id=""com.ti.ccstudio.buildDefinitions.MSP430_4.0.compilerID.OPT_LEVEL.release.210312471"" name=""Optimization level (--opt_level, -O)"" superClass=""com.ti.ccstudio.buildDefinitions.MSP430_4.0.compilerID.OPT_LEVEL.release"" value=""com.ti.ccstudio.buildDefinitions.MSP430_4.0.compilerID.OPT_LEVEL.0"" valueType=""enumerated""/>")
        PrintLine(1, "								<option id=""com.ti.ccstudio.buildDefinitions.MSP430_4.0.compilerID.DIAG_WARNING.532600227"" name=""Treat diagnostic &lt;id&gt; as warning (--diag_warning, -pdsw)"" superClass=""com.ti.ccstudio.buildDefinitions.MSP430_4.0.compilerID.DIAG_WARNING"" valueType=""stringList"">")
        PrintLine(1, "									<listOptionValue builtIn=""false"" value=""225""/>")
        PrintLine(1, "								</option>")
        PrintLine(1, "								<option id=""com.ti.ccstudio.buildDefinitions.MSP430_4.0.compilerID.DISPLAY_ERROR_NUMBER.1362004145"" name=""Emit diagnostic identifier numbers (--display_error_number, -pden)"" superClass=""com.ti.ccstudio.buildDefinitions.MSP430_4.0.compilerID.DISPLAY_ERROR_NUMBER"" value=""true"" valueType=""boolean""/>")
        PrintLine(1, "								<option id=""com.ti.ccstudio.buildDefinitions.MSP430_4.0.compilerID.INCLUDE_PATH.630958659"" name=""Add dir to #include search path (--include_path, -I)"" superClass=""com.ti.ccstudio.buildDefinitions.MSP430_4.0.compilerID.INCLUDE_PATH"" valueType=""includePath"">")
        PrintLine(1, "									<listOptionValue builtIn=""false"" value=""&quot;${CCS_BASE_ROOT}/msp430/include&quot;""/>")
        PrintLine(1, "									<listOptionValue builtIn=""false"" value=""&quot;${CG_TOOL_ROOT}/include&quot;""/>")
        PrintLine(1, "								</option>")
        PrintLine(1, "								<option id=""com.ti.ccstudio.buildDefinitions.MSP430_4.0.compilerID.ABI.186318473"" name=""Application binary interface (--abi)"" superClass=""com.ti.ccstudio.buildDefinitions.MSP430_4.0.compilerID.ABI"" value=""com.ti.ccstudio.buildDefinitions.MSP430_4.0.compilerID.ABI.coffabi"" valueType=""enumerated""/>")
        PrintLine(1, "								<inputType id=""com.ti.ccstudio.buildDefinitions.MSP430_4.0.compiler.inputType__C_SRCS.1008071280"" name=""C Sources"" superClass=""com.ti.ccstudio.buildDefinitions.MSP430_4.0.compiler.inputType__C_SRCS""/>")
        PrintLine(1, "								<inputType id=""com.ti.ccstudio.buildDefinitions.MSP430_4.0.compiler.inputType__CPP_SRCS.449766122"" name=""C++ Sources"" superClass=""com.ti.ccstudio.buildDefinitions.MSP430_4.0.compiler.inputType__CPP_SRCS""/>")
        PrintLine(1, "								<inputType id=""com.ti.ccstudio.buildDefinitions.MSP430_4.0.compiler.inputType__ASM_SRCS.655462225"" name=""Assembly Sources"" superClass=""com.ti.ccstudio.buildDefinitions.MSP430_4.0.compiler.inputType__ASM_SRCS""/>")
        PrintLine(1, "								<inputType id=""com.ti.ccstudio.buildDefinitions.MSP430_4.0.compiler.inputType__ASM2_SRCS.678697374"" name=""Assembly Sources"" superClass=""com.ti.ccstudio.buildDefinitions.MSP430_4.0.compiler.inputType__ASM2_SRCS""/>")
        PrintLine(1, "							</tool>")
        PrintLine(1, "							<tool id=""com.ti.ccstudio.buildDefinitions.MSP430_4.0.exe.linkerRelease.1910721801"" name=""MSP430 Linker"" superClass=""com.ti.ccstudio.buildDefinitions.MSP430_4.0.exe.linkerRelease"">")
        PrintLine(1, "								<option id=""com.ti.ccstudio.buildDefinitions.MSP430_4.0.linkerID.HEAP_SIZE.602707096"" name=""Heap size for C/C++ dynamic memory allocation (--heap_size, -heap)"" superClass=""com.ti.ccstudio.buildDefinitions.MSP430_4.0.linkerID.HEAP_SIZE"" value=""80"" valueType=""string""/>")
        PrintLine(1, "								<option id=""com.ti.ccstudio.buildDefinitions.MSP430_4.0.linkerID.STACK_SIZE.657801146"" name=""Set C system stack size (--stack_size, -stack)"" superClass=""com.ti.ccstudio.buildDefinitions.MSP430_4.0.linkerID.STACK_SIZE"" value=""80"" valueType=""string""/>")
        PrintLine(1, "								<option id=""com.ti.ccstudio.buildDefinitions.MSP430_4.0.linkerID.OUTPUT_FILE.265181619"" name=""Specify output file name (--output_file, -o)"" superClass=""com.ti.ccstudio.buildDefinitions.MSP430_4.0.linkerID.OUTPUT_FILE"" value=""&quot;${ProjName}.out&quot;"" valueType=""string""/>")
        PrintLine(1, "								<option id=""com.ti.ccstudio.buildDefinitions.MSP430_4.0.linkerID.MAP_FILE.476608268"" name=""Input and output sections listed into &lt;file&gt; (--map_file, -m)"" superClass=""com.ti.ccstudio.buildDefinitions.MSP430_4.0.linkerID.MAP_FILE"" value=""&quot;${ProjName}.map&quot;"" valueType=""string""/>")
        PrintLine(1, "								<option id=""com.ti.ccstudio.buildDefinitions.MSP430_4.0.linkerID.LIBRARY.1557347201"" name=""Include library file or command file as input (--library, -l)"" superClass=""com.ti.ccstudio.buildDefinitions.MSP430_4.0.linkerID.LIBRARY"" valueType=""libs"">")
        PrintLine(1, "									<listOptionValue builtIn=""false"" value=""&quot;libc.a&quot;""/>")
        PrintLine(1, "								</option>")
        PrintLine(1, "								<option id=""com.ti.ccstudio.buildDefinitions.MSP430_4.0.linkerID.SEARCH_PATH.43799889"" name=""Add &lt;dir&gt; to library search path (--search_path, -i)"" superClass=""com.ti.ccstudio.buildDefinitions.MSP430_4.0.linkerID.SEARCH_PATH"" valueType=""stringList"">")
        PrintLine(1, "									<listOptionValue builtIn=""false"" value=""&quot;${CCS_BASE_ROOT}/msp430/include&quot;""/>")
        PrintLine(1, "									<listOptionValue builtIn=""false"" value=""&quot;${CG_TOOL_ROOT}/lib&quot;""/>")
        PrintLine(1, "									<listOptionValue builtIn=""false"" value=""&quot;${CG_TOOL_ROOT}/include&quot;""/>")
        PrintLine(1, "								</option>")
        PrintLine(1, "								<inputType id=""com.ti.ccstudio.buildDefinitions.MSP430_4.0.exeLinker.inputType__CMD_SRCS.279574007"" name=""Linker Command Files"" superClass=""com.ti.ccstudio.buildDefinitions.MSP430_4.0.exeLinker.inputType__CMD_SRCS""/>")
        PrintLine(1, "								<inputType id=""com.ti.ccstudio.buildDefinitions.MSP430_4.0.exeLinker.inputType__CMD2_SRCS.2044919588"" name=""Linker Command Files"" superClass=""com.ti.ccstudio.buildDefinitions.MSP430_4.0.exeLinker.inputType__CMD2_SRCS""/>")
        PrintLine(1, "								<inputType id=""com.ti.ccstudio.buildDefinitions.MSP430_4.0.exeLinker.inputType__GEN_CMDS.874239411"" name=""Generated Linker Command Files"" superClass=""com.ti.ccstudio.buildDefinitions.MSP430_4.0.exeLinker.inputType__GEN_CMDS""/>")
        PrintLine(1, "							</tool>")
        PrintLine(1, "						</toolChain>")
        PrintLine(1, "					</folderInfo>")
        PrintLine(1, "				</configuration>")
        PrintLine(1, "			</storageModule>")
        PrintLine(1, "			<storageModule moduleId=""org.eclipse.cdt.core.externalSettings""/>")
        PrintLine(1, "		</cconfiguration>")
        PrintLine(1, "	</storageModule>")
        PrintLine(1, "	<storageModule moduleId=""cdtBuildSystem"" version=""4.0.0"">")
        PrintLine(1, "		<project id=""" & ProjectName & ".com.ti.ccstudio.buildDefinitions.MSP430.ProjectType.2146436511"" name=""MSP430"" projectType=""com.ti.ccstudio.buildDefinitions.MSP430.ProjectType""/>")
        PrintLine(1, "	</storageModule>")
        PrintLine(1, "	<storageModule moduleId=""refreshScope""/>")
        PrintLine(1, "	<storageModule moduleId=""org.eclipse.cdt.core.language.mapping"">")
        PrintLine(1, "		<project-mappings>")
        PrintLine(1, "			<content-type-mapping configuration="""" content-type=""org.eclipse.cdt.core.asmSource"" language=""com.ti.ccstudio.core.TIASMLanguage""/>")
        PrintLine(1, "			<content-type-mapping configuration="""" content-type=""org.eclipse.cdt.core.cHeader"" language=""com.ti.ccstudio.core.TIGCCLanguage""/>")
        PrintLine(1, "			<content-type-mapping configuration="""" content-type=""org.eclipse.cdt.core.cSource"" language=""com.ti.ccstudio.core.TIGCCLanguage""/>")
        PrintLine(1, "			<content-type-mapping configuration="""" content-type=""org.eclipse.cdt.core.cxxHeader"" language=""com.ti.ccstudio.core.TIGPPLanguage""/>")
        PrintLine(1, "			<content-type-mapping configuration="""" content-type=""org.eclipse.cdt.core.cxxSource"" language=""com.ti.ccstudio.core.TIGPPLanguage""/>")
        PrintLine(1, "		</project-mappings>")
        PrintLine(1, "	</storageModule>")
        PrintLine(1, "	<storageModule moduleId=""scannerConfiguration""/>")
        PrintLine(1, "	<storageModule moduleId=""org.eclipse.cdt.core.LanguageSettingsProviders""/>")
        PrintLine(1, "</cproject>")

        FileClose(1)

        FileOpen(1, Project_ccsproject_fileFullPath, OpenMode.Output)

        PrintLine(1, "<?xml version=""1.0"" encoding=""UTF-8"" standalone=""no""?>")
        PrintLine(1, "<?ccsproject version=""1.0""?>")
        PrintLine(1, "")
        PrintLine(1, "<projectOptions>")
        PrintLine(1, "<deviceVariant value=""MSP430G2553""/>")
        PrintLine(1, "<deviceEndianness value=""little""/>")
        PrintLine(1, "<codegenToolVersion value=""17.9.0.STS""/>")
        PrintLine(1, "<isElfFormat value=""false""/>")
        PrintLine(1, "<connection value=""common/targetdb/connections/TIMSP430-USB.xml""/>")
        PrintLine(1, "<linkerCommandFile value=""lnk_msp430g2553.cmd""/>")
        PrintLine(1, "<rts value=""libc.a""/>")
        PrintLine(1, "<templateProperties value=""id=com.ti.common.project.core.emptyProjectTemplate,""/>")
        PrintLine(1, "<deviceFamily value=""MSP430""/>")
        PrintLine(1, "<isTargetManual value=""false""/>")
        PrintLine(1, "</projectOptions>")

        FileClose(1)

        FileOpen(1, Project_cmd_fileFullPath, OpenMode.Output)

        PrintLine(1, "/* ============================================================================ */")
        PrintLine(1, "/* Copyright (c) 2014, Texas Instruments Incorporated                           */")
        PrintLine(1, "/*  All rights reserved.                                                        */")
        PrintLine(1, "/*                                                                              */")
        PrintLine(1, "/*  Redistribution and use in source and binary forms, with or without          */")
        PrintLine(1, "/*  modification, are permitted provided that the following conditions          */")
        PrintLine(1, "/*  are met:                                                                    */")
        PrintLine(1, "/*                                                                              */")
        PrintLine(1, "/*  *  Redistributions of source code must retain the above copyright           */")
        PrintLine(1, "/*     notice, this list of conditions and the following disclaimer.            */")
        PrintLine(1, "/*                                                                              */")
        PrintLine(1, "/*  *  Redistributions in binary form must reproduce the above copyright        */")
        PrintLine(1, "/*     notice, this list of conditions and the following disclaimer in the      */")
        PrintLine(1, "/*     documentation and/or other materials provided with the distribution.     */")
        PrintLine(1, "/*                                                                              */")
        PrintLine(1, "/*  *  Neither the name of Texas Instruments Incorporated nor the names of      */")
        PrintLine(1, "/*     its contributors may be used to endorse or promote products derived      */")
        PrintLine(1, "/*     from this software without specific prior written permission.            */")
        PrintLine(1, "/*                                                                              */")
        PrintLine(1, "/*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  */")
        PrintLine(1, "/*  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,       */")
        PrintLine(1, "/*  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR      */")
        PrintLine(1, "/*  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR            */")
        PrintLine(1, "/*  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,       */")
        PrintLine(1, "/*  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,         */")
        PrintLine(1, "/*  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; */")
        PrintLine(1, "/*  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,    */")
        PrintLine(1, "/*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR     */")
        PrintLine(1, "/*  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,              */")
        PrintLine(1, "/*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                          */")
        PrintLine(1, "/* ============================================================================ */")
        PrintLine(1, "")
        PrintLine(1, "/******************************************************************************/")
        PrintLine(1, "/* lnk_msp430g2553.cmd - LINKER COMMAND FILE FOR LINKING MSP430G2553 PROGRAMS     */")
        PrintLine(1, "/*                                                                            */")
        PrintLine(1, "/*   Usage:  lnk430 <obj files...>    -o <out file> -m <map file> lnk.cmd     */")
        PrintLine(1, "/*           cl430  <src files...> -z -o <out file> -m <map file> lnk.cmd     */")
        PrintLine(1, "/*                                                                            */")
        PrintLine(1, "/*----------------------------------------------------------------------------*/")
        PrintLine(1, "/* These linker options are for command line linking only.  For IDE linking,  */")
        PrintLine(1, "/* you should set your linker options in Project Properties                   */")
        PrintLine(1, "/* -c                                               LINK USING C CONVENTIONS  */")
        PrintLine(1, "/* -stack  0x0100                                   SOFTWARE STACK SIZE       */")
        PrintLine(1, "/* -heap   0x0100                                   HEAP AREA SIZE            */")
        PrintLine(1, "/*                                                                            */")
        PrintLine(1, "/*----------------------------------------------------------------------------*/")
        PrintLine(1, "/* Version: 1.145                                                             */")
        PrintLine(1, "/*----------------------------------------------------------------------------*/")
        PrintLine(1, "")
        PrintLine(1, "/****************************************************************************/")
        PrintLine(1, "/* Specify the system memory map                                            */")
        PrintLine(1, "/****************************************************************************/")
        PrintLine(1, "")
        PrintLine(1, "MEMORY")
        PrintLine(1, "{")
        PrintLine(1, "SFR                     : origin = 0x0000, length = 0x0010")
        PrintLine(1, "PERIPHERALS_8BIT        : origin = 0x0010, length = 0x00F0")
        PrintLine(1, "PERIPHERALS_16BIT       : origin = 0x0100, length = 0x0100")
        PrintLine(1, "RAM                     : origin = 0x0200, length = 0x0200")
        PrintLine(1, "INFOA                   : origin = 0x10C0, length = 0x0040")
        PrintLine(1, "INFOB                   : origin = 0x1080, length = 0x0040")
        PrintLine(1, "INFOC                   : origin = 0x1040, length = 0x0040")
        PrintLine(1, "INFOD                   : origin = 0x1000, length = 0x0040")
        PrintLine(1, "FLASH                   : origin = 0xC000, length = 0x3FE0")
        PrintLine(1, "INT00                   : origin = 0xFFE0, length = 0x0002")
        PrintLine(1, "INT01                   : origin = 0xFFE2, length = 0x0002")
        PrintLine(1, "INT02                   : origin = 0xFFE4, length = 0x0002")
        PrintLine(1, "INT03                   : origin = 0xFFE6, length = 0x0002")
        PrintLine(1, "INT04                   : origin = 0xFFE8, length = 0x0002")
        PrintLine(1, "INT05                   : origin = 0xFFEA, length = 0x0002")
        PrintLine(1, "INT06                   : origin = 0xFFEC, length = 0x0002")
        PrintLine(1, "INT07                   : origin = 0xFFEE, length = 0x0002")
        PrintLine(1, "INT08                   : origin = 0xFFF0, length = 0x0002")
        PrintLine(1, "INT09                   : origin = 0xFFF2, length = 0x0002")
        PrintLine(1, "INT10                   : origin = 0xFFF4, length = 0x0002")
        PrintLine(1, "INT11                   : origin = 0xFFF6, length = 0x0002")
        PrintLine(1, "INT12                   : origin = 0xFFF8, length = 0x0002")
        PrintLine(1, "INT13                   : origin = 0xFFFA, length = 0x0002")
        PrintLine(1, "INT14                   : origin = 0xFFFC, length = 0x0002")
        PrintLine(1, "RESET                   : origin = 0xFFFE, length = 0x0002")
        PrintLine(1, "}")
        PrintLine(1, "")
        PrintLine(1, "/****************************************************************************/")
        PrintLine(1, "/* Specify the sections allocation into memory                              */")
        PrintLine(1, "/****************************************************************************/")
        PrintLine(1, "")
        PrintLine(1, "SECTIONS")
        PrintLine(1, "{")
        PrintLine(1, ".bss        : {} > RAM                  /* Global & static vars              */")
        PrintLine(1, ".data       : {} > RAM                  /* Global & static vars              */")
        PrintLine(1, ".TI.noinit  : {} > RAM                  /* For #pragma noinit                */")
        PrintLine(1, ".sysmem     : {} > RAM                  /* Dynamic memory allocation area    */")
        PrintLine(1, ".stack      : {} > RAM (HIGH)           /* Software system stack             */")
        PrintLine(1, "")
        PrintLine(1, ".text       : {} > FLASH                /* Code                              */")
        PrintLine(1, ".cinit      : {} > FLASH                /* Initialization tables             */")
        PrintLine(1, ".const      : {} > FLASH                /* Constant data                     */")
        PrintLine(1, ".cio        : {} > RAM                  /* C I/O Buffer                      */")
        PrintLine(1, "")
        PrintLine(1, ".pinit      : {} > FLASH                /* C++ Constructor tables            */")
        PrintLine(1, ".init_array : {} > FLASH                /* C++ Constructor tables            */")
        PrintLine(1, ".mspabi.exidx : {} > FLASH              /* C++ Constructor tables            */")
        PrintLine(1, ".mspabi.extab : {} > FLASH              /* C++ Constructor tables            */")
        PrintLine(1, "")
        PrintLine(1, ".infoA     : {} > INFOA              /* MSP430 INFO FLASH Memory segments */")
        PrintLine(1, ".infoB     : {} > INFOB")
        PrintLine(1, ".infoC     : {} > INFOC")
        PrintLine(1, ".infoD     : {} > INFOD")
        PrintLine(1, "")
        PrintLine(1, "/* MSP430 Interrupt vectors          */")
        PrintLine(1, ".int00       : {}               > INT00")
        PrintLine(1, ".int01       : {}               > INT01")
        PrintLine(1, "PORT1        : { * ( .int02 ) } > INT02 type = VECT_INIT")
        PrintLine(1, "PORT2        : { * ( .int03 ) } > INT03 type = VECT_INIT")
        PrintLine(1, ".int04       : {}               > INT04")
        PrintLine(1, "ADC10        : { * ( .int05 ) } > INT05 type = VECT_INIT")
        PrintLine(1, "USCIAB0TX    : { * ( .int06 ) } > INT06 type = VECT_INIT")
        PrintLine(1, "USCIAB0RX    : { * ( .int07 ) } > INT07 type = VECT_INIT")
        PrintLine(1, "TIMER0_A1    : { * ( .int08 ) } > INT08 type = VECT_INIT")
        PrintLine(1, "TIMER0_A0    : { * ( .int09 ) } > INT09 type = VECT_INIT")
        PrintLine(1, "WDT          : { * ( .int10 ) } > INT10 type = VECT_INIT")
        PrintLine(1, "COMPARATORA   : { * ( .int11 ) } > INT11 type = VECT_INIT")
        PrintLine(1, "TIMER1_A1    : { * ( .int12 ) } > INT12 type = VECT_INIT")
        PrintLine(1, "TIMER1_A0    : { * ( .int13 ) } > INT13 type = VECT_INIT")
        PrintLine(1, "NMI          : { * ( .int14 ) } > INT14 type = VECT_INIT")
        PrintLine(1, ".reset       : {}               > RESET  /* MSP430 Reset vector         */ ")
        PrintLine(1, "}")
        PrintLine(1, "")
        PrintLine(1, "/****************************************************************************/")
        PrintLine(1, "/* Include peripherals memory map                                           */")
        PrintLine(1, "/****************************************************************************/")
        PrintLine(1, "")
        PrintLine(1, "-l msp430g2553.cmd")
        PrintLine(1, "")

        FileClose(1)

        FileOpen(1, Project_ccxml_fileFullPath, OpenMode.Output)

        PrintLine(1, "<?xml version=""1.0"" encoding=""UTF-8"" standalone=""no""?>")
        PrintLine(1, "<configurations XML_version=""1.2"" id=""configurations_0"">")
        PrintLine(1, "    <configuration XML_version=""1.2"" id=""configuration_0"">")
        PrintLine(1, "        <instance XML_version=""1.2"" desc=""TI MSP430 USB1"" href=""connections/TIMSP430-USB.xml"" id=""TI MSP430 USB1"" xml=""TIMSP430-USB.xml"" xmlpath=""connections""/>")
        PrintLine(1, "        <connection XML_version=""1.2"" id=""TI MSP430 USB1"">")
        PrintLine(1, "            <instance XML_version=""1.2"" href=""drivers/msp430_emu.xml"" id=""drivers"" xml=""msp430_emu.xml"" xmlpath=""drivers""/>")
        PrintLine(1, "            <platform XML_version=""1.2"" id=""platform_0"">")
        PrintLine(1, "                <instance XML_version=""1.2"" desc=""MSP430G2553"" href=""devices/MSP430G2553.xml"" id=""MSP430G2553"" xml=""MSP430G2553.xml"" xmlpath=""devices""/>")
        PrintLine(1, "            </platform>")
        PrintLine(1, "        </connection>")
        PrintLine(1, "    </configuration>")
        PrintLine(1, "</configurations>")

        FileClose(1)


        FileOpen(1, ProjectUART_HfileFullPath, OpenMode.Output)

        PrintLine(1, "#ifndef UART_PRINTF_H_")
        PrintLine(1, "#define UART_PRINTF_H_")
        PrintLine(1, "")
        PrintLine(1, "#define UART_PRINTF_SIZE 40")
        PrintLine(1, "#define MAX_NUM_FLOATS 10")
        PrintLine(1, "")
        PrintLine(1, "int UART_printf(const char *format, ...);")
        PrintLine(1, "void float2chars(float input, char* parts);")
        PrintLine(1, "float chars2float(char* parts);")
        PrintLine(1, "void my_scanf(char* rawmessage,...);")
        PrintLine(1, "void UART_send(int numargs,...);")
        PrintLine(1, "void Init_UART(unsigned long baudrate, char os);")
        PrintLine(1, "int sendchar(char c);")
        PrintLine(1, "")
        PrintLine(1, "extern char printbuff[UART_PRINTF_SIZE];")
        PrintLine(1, "extern char txbuff[MAX_NUM_FLOATS*5+1];")
        PrintLine(1, "extern char rxbuff[MAX_NUM_FLOATS*5+1];")
        PrintLine(1, "extern signed char txcount, currentindex, senddone;")
        PrintLine(1, "extern char printf_flag, donesending, UART_flag;")
        PrintLine(1, "")
        PrintLine(1, "char msgindex = 0, txindex = 0, started = 0, newmsg = 0;")
        PrintLine(1, "")
        PrintLine(1, "")
        PrintLine(1, "#endif")
        PrintLine(1, "")

        FileClose(1)


        FileOpen(1, ProjectUARTfuncsfileFullPath, OpenMode.Output)

        PrintLine(1, "#include ""msp430g2553.h""")
        PrintLine(1, "#include <stdarg.h>")
        PrintLine(1, "#include <stdio.h>")
        PrintLine(1, "")
        PrintLine(1, "#define UART_PRINTF_SIZE 40")
        PrintLine(1, "#define MAX_NUM_FLOATS 10")
        PrintLine(1, "")
        PrintLine(1, "char txbuff[MAX_NUM_FLOATS*5+1];")
        PrintLine(1, "char rxbuff[MAX_NUM_FLOATS*5 + 1];")
        PrintLine(1, "char printbuff[UART_PRINTF_SIZE];")
        PrintLine(1, "char donesending = 1;")
        PrintLine(1, "")
        PrintLine(1, "signed char txcount = 0;   ")
        PrintLine(1, "signed char currentindex = 0;")
        PrintLine(1, "signed char senddone = 1;")
        PrintLine(1, "char printf_flag = 0, UART_flag = 0;")
        PrintLine(1, "")
        PrintLine(1, "int sendchar(char c) {")
        PrintLine(1, "")
        PrintLine(1, "  if (senddone == 1) {")
        PrintLine(1, "    senddone = 0;")
        PrintLine(1, "    UCA0TXBUF = c;")
        PrintLine(1, "")
        PrintLine(1, "    return(0);")
        PrintLine(1, "  } else {")
        PrintLine(1, "    return(-1); // error")
        PrintLine(1, "  }")
        PrintLine(1, "}")
        PrintLine(1, "// This function assumes txbuff has already been filled with the characters to send.")
        PrintLine(1, "// It initializes txcount to the number of chars to send and then sets senddone = 0 so that txbuff is sent out UCATX")
        PrintLine(1, "int sendchars(int size) {")
        PrintLine(1, "")
        PrintLine(1, "  if (senddone == 1) {  // Only setup txcount if previous transmission complete")
        PrintLine(1, "    if (size < UART_PRINTF_SIZE) {")
        PrintLine(1, "      txcount = size;")
        PrintLine(1, "    } else {")
        PrintLine(1, "      txcount = UART_PRINTF_SIZE;")
        PrintLine(1, "    }")
        PrintLine(1, "")
        PrintLine(1, "    currentindex = 1;")
        PrintLine(1, "    senddone = 0;  // signal that a new transmission should occur.")
        PrintLine(1, "    UCA0TXBUF = printbuff[0];")
        PrintLine(1, "")
        PrintLine(1, "    return(0);")
        PrintLine(1, "  } else {")
        PrintLine(1, "    return(-1); // error")
        PrintLine(1, "  }")
        PrintLine(1, "")
        PrintLine(1, "}")
        PrintLine(1, "")
        PrintLine(1, "int UART_printf(const char *format, ...)               ")
        PrintLine(1, "{")
        PrintLine(1, "  // the ""va"" and ""v"" functions handle the variable argument ... in the function parameters")
        PrintLine(1, "  va_list ap;")
        PrintLine(1, "  int error;")
        PrintLine(1, "")
        PrintLine(1, "	printf_flag = 1;")
        PrintLine(1, "")
        PrintLine(1, "  va_start(ap, format);      /* Variable argument begin */")
        PrintLine(1, "  error = sendchars(vsprintf(printbuff, format, ap));   // fill txbuff with the format string and the pass the size of txbuff to the sendchars function")
        PrintLine(1, "  va_end(ap);                /* Variable argument end */")
        PrintLine(1, "  return error;")
        PrintLine(1, "}")
        PrintLine(1, "")
        PrintLine(1, "// Converts a 32-bit float into 5 characters for UART transmission")
        PrintLine(1, "// Inputs are floating-point number to convert and an array pointer to store")
        PrintLine(1, "// bits in.  Bits are stored from least-significant 7 (in [0]-element) to")
        PrintLine(1, "// most-significant 4 (in [4]-element)")
        PrintLine(1, "void float2chars(float input, char* parts) {")
        PrintLine(1, "")
        PrintLine(1, "	union {")
        PrintLine(1, "		unsigned long bits;")
        PrintLine(1, "		float number;")
        PrintLine(1, "	} floatbits;")
        PrintLine(1, "")
        PrintLine(1, "	floatbits.number = input;")
        PrintLine(1, "")
        PrintLine(1, "	parts[0] = floatbits.bits & ~0x80; // clear top bit")
        PrintLine(1, "	parts[1] = (floatbits.bits >> 7) & ~0x80;")
        PrintLine(1, "	parts[2] = (floatbits.bits >> 14) & ~0x80;")
        PrintLine(1, "	parts[3] = (floatbits.bits >> 21) & ~0x80;")
        PrintLine(1, "	parts[4] = (floatbits.bits >> 28);")
        PrintLine(1, "")
        PrintLine(1, "}")
        PrintLine(1, "")
        PrintLine(1, "")
        PrintLine(1, "// Converts a 5-element array of chars received via UART to a 32-bit float")
        PrintLine(1, "// Input pointer to array of chars")
        PrintLine(1, "// Bits are decoded from least significant 7 (in [0]-element) to most ")
        PrintLine(1, "// significant 4 (in [4]-element)")
        PrintLine(1, "float chars2float(char* parts) {")
        PrintLine(1, "")
        PrintLine(1, "		union {")
        PrintLine(1, "		unsigned long bits;")
        PrintLine(1, "		float number;")
        PrintLine(1, "	} floatbits;")
        PrintLine(1, "")
        PrintLine(1, "	floatbits.bits = parts[0] + ((long)parts[1]<<7) + ((long)parts[2]<<14) + ")
        PrintLine(1, "															((long)parts[3]<<21) + ((long)parts[4]<<28);")
        PrintLine(1, "")
        PrintLine(1, "	return floatbits.number;")
        PrintLine(1, "}")
        PrintLine(1, "")
        PrintLine(1, "")
        PrintLine(1, "")
        PrintLine(1, "")
        PrintLine(1, "void my_scanf(char* rawmessage,...) {")
        PrintLine(1, "	char endindex = 0, i = 0;")
        PrintLine(1, "	va_list a_list;")
        PrintLine(1, "")
        PrintLine(1, "	while(rawmessage[endindex] != 255) {")
        PrintLine(1, "		endindex++;")
        PrintLine(1, "")
        PrintLine(1, "		if(endindex > MAX_NUM_FLOATS*5) return;")
        PrintLine(1, "	}")
        PrintLine(1, "")
        PrintLine(1, "	va_start(a_list,rawmessage);")
        PrintLine(1, "")
        PrintLine(1, "	for(i=0;i<endindex; i=i+5) {")
        PrintLine(1, "		*va_arg(a_list,float *) = chars2float(&rawmessage[i]);")
        PrintLine(1, "	}")
        PrintLine(1, "")
        PrintLine(1, "}")
        PrintLine(1, "")
        PrintLine(1, "")
        PrintLine(1, "void UART_send(int numargs,...) {")
        PrintLine(1, "	va_list a_list;")
        PrintLine(1, "	char i = 0;")
        PrintLine(1, "")
        PrintLine(1, "	if(numargs > MAX_NUM_FLOATS || !donesending) return;	// error")
        PrintLine(1, "")
        PrintLine(1, "	va_start(a_list,numargs);")
        PrintLine(1, "")
        PrintLine(1, "	for(i = 0; i<numargs; i++) {")
        PrintLine(1, "		float2chars((float)va_arg(a_list,double),&txbuff[5*i]);		")
        PrintLine(1, "	}")
        PrintLine(1, "")
        PrintLine(1, "	va_end(a_list);")
        PrintLine(1, "")
        PrintLine(1, "	txbuff[5*numargs] = 255;")
        PrintLine(1, "")
        PrintLine(1, "	UART_flag = 1;")
        PrintLine(1, "	donesending = 0;")
        PrintLine(1, "	UCA0TXBUF = 253;")
        PrintLine(1, "")
        PrintLine(1, "}")
        PrintLine(1, "")
        PrintLine(1, "")
        PrintLine(1, "// USCI_A Initialization - UART mode")
        PrintLine(1, "// Assumes SMCLK is running at 16MHz")
        PrintLine(1, "// Inputs: baud rate and os = 0 or 1 indicating whether to use oversampling mode")
        PrintLine(1, "void Init_UART(unsigned long baudrate, char os) {")
        PrintLine(1, "	float n = 0;")
        PrintLine(1, "	char BRFx = 0, BRSx = 0;")
        PrintLine(1, "	int BRx = 0;")
        PrintLine(1, "")
        PrintLine(1, "	if(os > 1) os = 1;	// error check since os is a logical")
        PrintLine(1, "")
        PrintLine(1, "	n = 16.0e6/baudrate;")
        PrintLine(1, "")
        PrintLine(1, "	UCA0CTL1 = UCSSEL_2 + UCSWRST;           // source SMCLK, hold module in reset")
        PrintLine(1, "")
        PrintLine(1, "	if(os && (n >= 16)) {										// Oversampling mode")
        PrintLine(1, "		BRx = (int)(n/16);										// Baud rate selection")
        PrintLine(1, "		BRFx = (int)(((n/16)-BRx)*16 + 0.5);	// Modulator selection")
        PrintLine(1, "		UCA0MCTL = UCOS16 + (BRFx<<4);")
        PrintLine(1, "	}")
        PrintLine(1, "	else {																	// Normal mode")
        PrintLine(1, "		BRx = (int)n;													// Baud rate selection")
        PrintLine(1, "		BRSx = (int)((n-BRx)*8 + 0.5);				// Modulator selection")
        PrintLine(1, "		UCA0MCTL = BRSx<<1;")
        PrintLine(1, "	}")
        PrintLine(1, "")
        PrintLine(1, "	UCA0BR0 = BRx % 256;")
        PrintLine(1, "	UCA0BR1 = BRx / 256;")
        PrintLine(1, "")
        PrintLine(1, "	//msp430G2553")
        PrintLine(1, "	P1SEL |= 0x6;")
        PrintLine(1, "	P1SEL2 |= 0x6;")
        PrintLine(1, "	//P3SEL |= 0x30;                            // P3.4,5 = USCI_A0 TXD/RXD")
        PrintLine(1, "	UCA0CTL1 &= ~UCSWRST;                     // Release USCI module for operation")
        PrintLine(1, "	IFG2 &= ~(UCA0TXIFG + UCA0RXIFG);					// Clear pending interrupt flags")
        PrintLine(1, "  IE2 |= UCA0TXIE;                        	// Enable USCI_A0 TX interrupt")
        PrintLine(1, "  IE2 |= UCA0RXIE;                        	// Enable USCI_A0 RX interrupt")
        PrintLine(1, "")
        PrintLine(1, "}")
        PrintLine(1, "")
        PrintLine(1, "")

        FileClose(1)

        FileOpen(1, ProjectCfileFullPath, OpenMode.Output)

        PrintLine(1, "/******************************************************************************")
        PrintLine(1, "MSP430G2553 Project Creator")
        PrintLine(1, "")
        PrintLine(1, "SE 423  - Dan Block")
        PrintLine(1, "        Spring(2019)")
        PrintLine(1, "")
        PrintLine(1, "        Written(by) : Steve(Keres)")
        PrintLine(1, "College of Engineering Control Systems Lab")
        PrintLine(1, "University of Illinois at Urbana-Champaign")
        PrintLine(1, "*******************************************************************************/")
        PrintLine(1, "")
        PrintLine(1, "#include ""msp430g2553.h""")
        PrintLine(1, "#include ""UART.h""")
        PrintLine(1, "")
        PrintLine(1, "void print_every(int rate);")
        PrintLine(1, "")
        PrintLine(1, "char newprint = 0;")
        PrintLine(1, "long NumOn = 0;")
        PrintLine(1, "long NumOff = 0;")
        PrintLine(1, "int statevar = 1;")
        PrintLine(1, "int timecheck = 0;")
        PrintLine(1, "")
        PrintLine(1, "void main(void) {")
        PrintLine(1, "")
        PrintLine(1, "	WDTCTL = WDTPW + WDTHOLD;                 // Stop WDT")
        PrintLine(1, "")
        PrintLine(1, "	if (CALBC1_16MHZ ==0xFF || CALDCO_16MHZ == 0xFF) while(1);")
        PrintLine(1, "")
        PrintLine(1, "	DCOCTL = CALDCO_16MHZ;    // Set uC to run at approximately 16 Mhz")
        PrintLine(1, "	BCSCTL1 = CALBC1_16MHZ; ")
        PrintLine(1, "")
        PrintLine(1, "	// Initialize Port 1")
        PrintLine(1, "	P1SEL &= ~0x01;  // See page 42 and 43 of the G2553's datasheet, It shows that when both P1SEL and P1SEL2 bits are zero   ")
        PrintLine(1, "	P1SEL2 &= ~0x01; // the corresponding pin is set as a I/O pin.  Datasheet: http://coecsl.ece.illinois.edu/ge423/datasheets/MSP430Ref_Guides/msp430g2553datasheet.pdf  ")
        PrintLine(1, "	P1REN = 0x0;  // No resistors enabled for Port 1")
        PrintLine(1, "	P1DIR |= 0x1; // Set P1.0 to output to drive LED on LaunchPad board.  Make sure shunt jumper is in place at LaunchPad's Red LED")
        PrintLine(1, "	P1OUT &= ~0x01;  // Initially set P1.0 to 0")
        PrintLine(1, "")
        PrintLine(1, "")
        PrintLine(1, "	// Timer A Config")
        PrintLine(1, "	TACCTL0 = CCIE;       		// Enable Periodic interrupt")
        PrintLine(1, "	TACCR0 = 16000;                // period = 1ms   ")
        PrintLine(1, "	TACTL = TASSEL_2 + MC_1; // source SMCLK, up mode")
        PrintLine(1, "")
        PrintLine(1, "")
        PrintLine(1, "	Init_UART(115200,1);	// Initialize UART for 115200 baud serial communication")
        PrintLine(1, "")
        PrintLine(1, "	_BIS_SR(GIE); 		// Enable global interrupt")
        PrintLine(1, "")
        PrintLine(1, "")
        PrintLine(1, "    while(1) {  // Low priority Slow computation items go inside this while loop.  Very few (if anyt) items in the HWs will go inside this while loop")
        PrintLine(1, "")
        PrintLine(1, "// for use if you want to use a method of receiving a string of chars over the UART see USCI0RX_ISR below")
        PrintLine(1, "//      if(newmsg) {")
        PrintLine(1, "//          newmsg = 0;")
        PrintLine(1, "//      }")
        PrintLine(1, "")
        PrintLine(1, "        // The newprint variable is set to 1 inside the function ""print_every(rate)"" at the given rate")
        PrintLine(1, "        if ( (newprint == 1) && (senddone == 1) )  { // senddone is set to 1 after UART transmission is complete")
        PrintLine(1, "")
        PrintLine(1, "            // only one UART_printf can be called every 15ms")
        PrintLine(1, "            UART_printf(""St%d On %ld Off %ld\n\r"",statevar,NumOn,NumOff);")
        PrintLine(1, "")
        PrintLine(1, "            newprint = 0;")
        PrintLine(1, "        }")
        PrintLine(1, "")
        PrintLine(1, "    }")
        PrintLine(1, "}")
        PrintLine(1, "")
        PrintLine(1, "")
        PrintLine(1, "// Timer A0 interrupt service routine")
        PrintLine(1, "#pragma vector=TIMER0_A0_VECTOR")
        PrintLine(1, "__interrupt void Timer_A (void)")
        PrintLine(1, "{")
        PrintLine(1, "    timecheck++; // Keep track of time for main while loop.")
        PrintLine(1, "    print_every(500);  // units determined by the rate Timer_A ISR is called, print every ""rate"" calls to this function")
        PrintLine(1, "")
        PrintLine(1, "    switch (statevar) {")
        PrintLine(1, "        case 1:  //LED ON")
        PrintLine(1, "")
        PrintLine(1, "            P1OUT |= 0x1;  // really do not have to turn on the LED each time in here but making the point that this is the functionality of statevar = 1")
        PrintLine(1, "            NumOn++;")
        PrintLine(1, "            if (timecheck == 500) {  // if statement to determine what the state should be the next millisecond into the Timer_A function")
        PrintLine(1, "                timecheck = 0;")
        PrintLine(1, "")
        PrintLine(1, "                statevar = 2;  // Next Timer_A call go to state 2")
        PrintLine(1, "            } else {")
        PrintLine(1, "                statevar = 1;  // stays the same.  So not really needed")
        PrintLine(1, "            }")
        PrintLine(1, "            break;")
        PrintLine(1, "        case 2:  //LED OFF")
        PrintLine(1, "")
        PrintLine(1, "            P1OUT &= ~0x1;  // really do not have to turn off the LED each time in here but making the point that this is the function of statevar = 2")
        PrintLine(1, "            NumOff++;")
        PrintLine(1, "            if (timecheck == 250) {  // if statement to determine what the state should be the next millisecond into the Timer_A function")
        PrintLine(1, "                timecheck = 0;")
        PrintLine(1, "")
        PrintLine(1, "                statevar = 1;")
        PrintLine(1, "            } else {")
        PrintLine(1, "                statevar = 2;  // stays the same.  So not really needed")
        PrintLine(1, "            }")
        PrintLine(1, "            break;")
        PrintLine(1, "    }")
        PrintLine(1, "")
        PrintLine(1, "}")
        PrintLine(1, "")
        PrintLine(1, "")
        PrintLine(1, "/*")
        PrintLine(1, "// ADC 10 ISR - Called when a sequence of conversions (A7-A0) have completed")
        PrintLine(1, "#pragma vector=ADC10_VECTOR")
        PrintLine(1, "__interrupt void ADC10_ISR(void) {")
        PrintLine(1, "")
        PrintLine(1, "}")
        PrintLine(1, "*/")
        PrintLine(1, "")
        PrintLine(1, "")
        PrintLine(1, "// USCI Transmit ISR - Called when TXBUF is empty (ready to accept another character)")
        PrintLine(1, "#pragma vector=USCIAB0TX_VECTOR")
        PrintLine(1, "__interrupt void USCI0TX_ISR(void) {")
        PrintLine(1, "")
        PrintLine(1, "	if(IFG2&UCA0TXIFG) {		// USCI_A0 requested TX interrupt")
        PrintLine(1, "		if(printf_flag) {")
        PrintLine(1, "			if (currentindex == txcount) {")
        PrintLine(1, "				senddone = 1;")
        PrintLine(1, "				printf_flag = 0;")
        PrintLine(1, "				IFG2 &= ~UCA0TXIFG;")
        PrintLine(1, "			} else {")
        PrintLine(1, "				UCA0TXBUF = printbuff[currentindex];")
        PrintLine(1, "				currentindex++;")
        PrintLine(1, "			}")
        PrintLine(1, "		} else if(UART_flag) {")
        PrintLine(1, "			if(!donesending) {")
        PrintLine(1, "				UCA0TXBUF = txbuff[txindex];")
        PrintLine(1, "				if(txbuff[txindex] == 255) {")
        PrintLine(1, "					donesending = 1;")
        PrintLine(1, "					txindex = 0;")
        PrintLine(1, "				}")
        PrintLine(1, "				else txindex++;")
        PrintLine(1, "			}")
        PrintLine(1, "		} else {  // interrupt after sendchar call so just set senddone flag since only one char is sent")
        PrintLine(1, "			senddone = 1;")
        PrintLine(1, "		}")
        PrintLine(1, "")
        PrintLine(1, "		IFG2 &= ~UCA0TXIFG;")
        PrintLine(1, "	}")
        PrintLine(1, "")
        PrintLine(1, "	if(IFG2&UCB0TXIFG) {	// USCI_B0 requested TX interrupt (UCB0TXBUF is empty)")
        PrintLine(1, "")
        PrintLine(1, "		IFG2 &= ~UCB0TXIFG;   // clear IFG")
        PrintLine(1, "	}")
        PrintLine(1, "}")
        PrintLine(1, "")
        PrintLine(1, "")
        PrintLine(1, "// USCI Receive ISR - Called when shift register has been transferred to RXBUF")
        PrintLine(1, "// Indicates completion of TX/RX operation")
        PrintLine(1, "#pragma vector=USCIAB0RX_VECTOR")
        PrintLine(1, "__interrupt void USCI0RX_ISR(void) {")
        PrintLine(1, "")
        PrintLine(1, "	if(IFG2&UCB0RXIFG) {  // USCI_B0 requested RX interrupt (UCB0RXBUF is full)")
        PrintLine(1, "")
        PrintLine(1, "		IFG2 &= ~UCB0RXIFG;   // clear IFG")
        PrintLine(1, "	}")
        PrintLine(1, "")
        PrintLine(1, "	if(IFG2&UCA0RXIFG) {  // USCI_A0 requested RX interrupt (UCA0RXBUF is full)")
        PrintLine(1, "")
        PrintLine(1, "//    Uncomment this block of code if you would like to use this COM protocol that uses 253 as STARTCHAR and 255 as STOPCHAR")
        PrintLine(1, "/*		if(!started) {	// Haven't started a message yet")
        PrintLine(1, "			if(UCA0RXBUF == 253) {")
        PrintLine(1, "				started = 1;")
        PrintLine(1, "				newmsg = 0;")
        PrintLine(1, "			}")
        PrintLine(1, "		}")
        PrintLine(1, "		else {	// In process of receiving a message		")
        PrintLine(1, "			if((UCA0RXBUF != 255) && (msgindex < (MAX_NUM_FLOATS*5))) {")
        PrintLine(1, "				rxbuff[msgindex] = UCA0RXBUF;")
        PrintLine(1, "")
        PrintLine(1, "				msgindex++;")
        PrintLine(1, "			} else {	// Stop char received or too much data received")
        PrintLine(1, "				if(UCA0RXBUF == 255) {	// Message completed")
        PrintLine(1, "					newmsg = 1;")
        PrintLine(1, "					rxbuff[msgindex] = 255;	// ""Null""-terminate the array")
        PrintLine(1, "				}")
        PrintLine(1, "				started = 0;")
        PrintLine(1, "				msgindex = 0;")
        PrintLine(1, "			}")
        PrintLine(1, "		}")
        PrintLine(1, "*/")
        PrintLine(1, "")
        PrintLine(1, "		IFG2 &= ~UCA0RXIFG;")
        PrintLine(1, "	}")
        PrintLine(1, "")
        PrintLine(1, "}")
        PrintLine(1, "")
        PrintLine(1, "// This function takes care of all the timing for printing to UART")
        PrintLine(1, "// Rate determined by how often the function is called in Timer ISR")
        PrintLine(1, "int print_timecheck = 0;")
        PrintLine(1, "void print_every(int rate) {")
        PrintLine(1, "    if (rate < 15) {")
        PrintLine(1, "        rate = 15;")
        PrintLine(1, "    }")
        PrintLine(1, "    if (rate > 10000) {")
        PrintLine(1, "        rate = 10000;")
        PrintLine(1, "    }")
        PrintLine(1, "    print_timecheck++;")
        PrintLine(1, "    if (print_timecheck == rate) {")
        PrintLine(1, "        print_timecheck = 0;")
        PrintLine(1, "        newprint = 1;")
        PrintLine(1, "    }")
        PrintLine(1, "")
        PrintLine(1, "}")
        PrintLine(1, "")

        FileClose(1)


        Me.Close()

NoWrite:

    End Sub
End Class
